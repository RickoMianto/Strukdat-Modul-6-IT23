#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Kelas Abstrak
class Orang {
protected:
    int id;
    string nama;
    string departemen;

public:
    Orang(int id, const string& nama, const string& departemen)
        : id(id), nama(nama), departemen(departemen) {}

    // Method Abstrak
    virtual void tampilkan() const = 0;

    int getId() const {
        return id;
    }

    string getNama() const {
        return nama;
    }

    string getDepartemen() const {
        return departemen;
    }

    void setNama(const string& namaBaru) {
        nama = namaBaru;
    }

    void setDepartemen(const string& departemenBaru) {
        departemen = departemenBaru;
    }
};

class Karyawan : public Orang {
private:
    double gaji;

public:
    Karyawan(int id, const string& nama, const string& departemen, double gaji)
        : Orang(id, nama, departemen), gaji(gaji) {}

    double getGaji() const {
        return gaji;
    }

    void setGaji(double gajiBaru) {
        gaji = gajiBaru;
    }

    // Overriding
    void tampilkan() const override {
        cout << "ID: " << id << ", Nama: " << nama << ", Departemen: " << departemen << ", Gaji: Rp" << gaji << endl;
    }
};

class Perusahaan {
private:
    vector<Karyawan> karyawan;
    int idBerikutnya;

public:
    Perusahaan() : idBerikutnya(1) {}

    void tambahKaryawan(const string& nama, const string& departemen, double gaji) {
        karyawan.push_back(Karyawan(idBerikutnya++, nama, departemen, gaji));
    }

    void lihatKaryawan() const {
        if (karyawan.empty()) {
            cout << "Tidak ada karyawan." << endl;
            return;
        }
        for (const auto& k : karyawan) {
            k.tampilkan();
        }
    }

    void editDataKaryawan(int id, const string& namaBaru, const string& departemenBaru, double gajiBaru) {
        for (auto& k : karyawan) {
            if (k.getId() == id) {
                k.setNama(namaBaru);
                k.setDepartemen(departemenBaru);
                k.setGaji(gajiBaru);
                cout << "Karyawan berhasil diperbarui." << endl;
                return;
            }
        }
        cout << "Karyawan dengan ID " << id << " tidak ditemukan." << endl;
    }

    void hapusKaryawan(int id) {
        for (auto it = karyawan.begin(); it != karyawan.end(); ++it) {
            if (it->getId() == id) {
                karyawan.erase(it);
                cout << "Karyawan berhasil dihapus." << endl;
                return;
            }
        }
        cout << "Karyawan dengan ID " << id << " tidak ditemukan." << endl;
    }
};

int main() {
    Perusahaan perusahaan;
    int pilihan;
    string nama, departemen;
    double gaji;
    int id;

    do {
        cout << "\nSistem Manajemen Karyawan\n";
        cout << "1. Tambah Karyawan\n";
        cout << "2. Lihat Karyawan\n";
        cout << "3. Edit Data Karyawan\n";
        cout << "4. Hapus Karyawan\n";
        cout << "5. Keluar\n";
        cout << "Masukkan pilihan Anda: ";
        cin >> pilihan;

        switch (pilihan) {
            case 1:
                cout << "Masukkan nama karyawan: ";
                cin.ignore();
                getline(cin, nama);
                cout << "Masukkan departemen karyawan: ";
                getline(cin, departemen);
                cout << "Masukkan gaji karyawan: ";
                cin >> gaji;
                perusahaan.tambahKaryawan(nama, departemen, gaji);
                cout << "Karyawan berhasil ditambahkan." << endl;
                break;
            case 2:
                perusahaan.lihatKaryawan();
                break;
            case 3:
                cout << "Masukkan ID karyawan yang akan diperbarui: ";
                cin >> id;
                cout << "Masukkan nama baru karyawan: ";
                cin.ignore();
                getline(cin, nama);
                cout << "Masukkan departemen baru karyawan: ";
                getline(cin, departemen);
                cout << "Masukkan gaji baru karyawan: ";
                cin >> gaji;
                perusahaan.editDataKaryawan(id, nama, departemen, gaji);
                break;
            case 4:
                cout << "Masukkan ID karyawan yang akan dihapus: ";
                cin >> id;
                perusahaan.hapusKaryawan(id);
                break;
            case 5:
                cout << "Keluar..." << endl;
                break;
            default:
                cout << "Pilihan tidak valid. Silakan coba lagi." << endl;
        }
    } while (pilihan != 5);

    return 0;
}
