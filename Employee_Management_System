#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

class Orang {
protected:
    int id;
    string nama;
    string departemen;

public:
    Orang(int id, const string& nama, const string& departemen)
        : id(id), nama(nama), departemen(departemen) {}

    virtual void display() const = 0;

    int getId() const {
        return id;
    }

    string getNama() const {
        return nama;
    }

    string getDepartemen() const {
        return departemen;
    }

    void setNama(const string& namaBaru) {
        nama = namaBaru;
    }

    void setDepartemen(const string& departemenBaru) {
        departemen = departemenBaru;
    }
};

class Karyawan : public Orang {
private:
    double gaji;

public:
    Karyawan(int id, const string& nama, const string& departemen, double gaji)
        : Orang(id, nama, departemen), gaji(gaji) {}

    double getGaji() const {
        return gaji;
    }

    void setGaji(double gajiBaru) {
        gaji = gajiBaru;
    }

    void display() const override {
        cout << "ID: " << id << ", Nama: " << nama << ", Departemen: " << departemen << ", Gaji: Rp" << gaji << endl;
    }
};

class Perusahaan {
private:
    vector<Karyawan> karyawan;

public:
    void tambahKaryawan(int id, const string& nama, const string& departemen, double gaji) {
        karyawan.push_back(Karyawan(id, nama, departemen, gaji));
    }

    void displayKaryawan() const {
        if (karyawan.empty()) {
            cout << "Tidak ada karyawan." << endl;
            return;
        }
        for (const auto& k : karyawan) {
            k.display();
        }
    }

    void displayById() const {
        if (karyawan.empty()) {
            cout << "Tidak ada karyawan." << endl;
            return;
        }
        vector<Karyawan> sortedKaryawan = karyawan;
        sort(sortedKaryawan.begin(), sortedKaryawan.end(), [](const Karyawan& a, const Karyawan& b) {
            return a.getId() < b.getId();
        });
        for (const auto& k : sortedKaryawan) {
            k.display();
        }
    }

    void displayByGaji() const {
        if (karyawan.empty()) {
            cout << "Tidak ada karyawan." << endl;
            return;
        }
        vector<Karyawan> sortedKaryawan = karyawan;
        sort(sortedKaryawan.begin(), sortedKaryawan.end(), [](const Karyawan& a, const Karyawan& b) {
            return a.getGaji() < b.getGaji();
        });
        for (const auto& k : sortedKaryawan) {
            k.display();
        }
    }

    void editDataKaryawan(int id, const string& namaBaru, const string& departemenBaru, double gajiBaru) {
        for (auto& k : karyawan) {
            if (k.getId() == id) {
                k.setNama(namaBaru);
                k.setDepartemen(departemenBaru);
                k.setGaji(gajiBaru);
                cout << "Data karyawan berhasil diperbarui." << endl;
                return;
            }
        }
        cout << "Karyawan dengan ID " << id << " tidak ditemukan." << endl;
    }

    void hapusKaryawan(int id) {
        for (auto it = karyawan.begin(); it != karyawan.end(); ++it) {
            if (it->getId() == id) {
                karyawan.erase(it);
                cout << "Karyawan berhasil dihapus." << endl;
                return;
            }
        }
        cout << "Karyawan dengan ID " << id << " tidak ditemukan." << endl;
    }
};

int main() {
    Perusahaan perusahaan;
    int pilihan;
    string nama, departemen;
    double gaji;
    int id;

    do {
        cout << "\nSistem Manajemen Karyawan\n";
        cout << "1. Tambah Karyawan\n";
        cout << "2. Display Karyawan\n";
        cout << "3. Edit Data Karyawan\n";
        cout << "4. Hapus Karyawan\n";
        cout << "5. Keluar\n";
        cout << "Input pilihan Anda: ";
        cin >> pilihan;

        switch (pilihan) {
            case 1:
                cout << "Input ID karyawan: ";
                cin >> id;
                cout << "Input nama karyawan: ";
                cin.ignore();
                getline(cin, nama);
                cout << "Input departemen karyawan: ";
                getline(cin, departemen);
                cout << "Input gaji karyawan: ";
                cin >> gaji;
                perusahaan.tambahKaryawan(id, nama, departemen, gaji);
                cout << "Karyawan berhasil ditambahkan." << endl;
                break;
            case 2:
                int subpilihan;
                do {
                    cout << "\nDisplay Karyawan Berdasarkan :\n";
                    cout << "1. ID\n";
                    cout << "2. Gaji\n";
                    cout << "3. Keluar\n";
                    cout << "Input pilihan Anda: ";
                    cin >> subpilihan;

                    switch (subpilihan) {
                        case 1:
                            perusahaan.displayById();
                            break;
                        case 2:
                            perusahaan.displayByGaji();
                            break;
                        case 3:
                            cout << "Kembali ke Menu utama" << endl;
                            break;
                        default:
                            cout << "Pilihan tidak valid. Silakan coba lagi." << endl;
                    }
                } while (subpilihan != 3);
                break;
            case 3:
                cout << "Input ID karyawan yang akan di update: ";
                cin >> id;
                cout << "Input nama baru karyawan: ";
                cin.ignore();
                getline(cin, nama);
                cout << "Input departemen baru karyawan: ";
                getline(cin, departemen);
                cout << "Input gaji baru karyawan: ";
                cin >> gaji;
                perusahaan.editDataKaryawan(id, nama, departemen, gaji);
                break;
            case 4:
                cout << "Input ID karyawan yang akan dihapus: ";
                cin >> id;
                perusahaan.hapusKaryawan(id);
                break;
            case 5:
                cout << "Berhasil keluar dari program" << endl;
                break;
            default:
                cout << "Pilihan tidak valid. Silakan coba lagi." << endl;
        }
    } while (pilihan != 5);

    return 0;
}
